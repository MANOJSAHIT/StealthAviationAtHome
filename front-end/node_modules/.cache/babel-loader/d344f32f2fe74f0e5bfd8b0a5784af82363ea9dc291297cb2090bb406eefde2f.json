{"ast":null,"code":"var _jsxFileName = \"/Users/manojsahithreddyvanga/Desktop/Testing/chatgpt-clone/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Message from \"./components/Message\";\nimport Input from \"./components/Input\";\nimport History from \"./components/History\";\nimport Clear from \"./components/Clear\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState(() => {\n    const savedMessages = localStorage.getItem(\"messages\");\n    return savedMessages ? JSON.parse(savedMessages) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem(\"messages\", JSON.stringify(messages));\n  }, [messages]);\n  const handleSubmit = async () => {\n    const userMessage = {\n      role: \"user\",\n      content: input\n    };\n    setMessages([...messages, userMessage]);\n    try {\n      const response = await fetch(\"http://localhost:5000/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_input: input\n        })\n      });\n      const data = await response.json();\n      const assistantMessage = {\n        role: \"assistant\",\n        content: data.response\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n      setInput(\"\");\n    } catch (error) {\n      console.error(\"Error during fetch:\", error);\n    }\n  };\n  const clear = async () => {\n    setMessages([]);\n    localStorage.removeItem(\"messages\");\n    await fetch(\"http://localhost:5000/api/clear\", {\n      method: \"POST\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Column\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"Title\",\n        children: \"Chat Messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Content\",\n        children: messages.map((el, i) => /*#__PURE__*/_jsxDEV(Message, {\n          role: el.role,\n          content: el.content\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onClick: input ? handleSubmit : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Clear, {\n      onClick: clear\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"RffXzrVuD15oUHqqgvknrAkr2lo=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Message","Input","History","Clear","jsxDEV","_jsxDEV","App","_s","input","setInput","messages","setMessages","savedMessages","localStorage","getItem","JSON","parse","setItem","stringify","handleSubmit","userMessage","role","content","response","fetch","method","headers","body","user_input","data","json","assistantMessage","prev","error","console","clear","removeItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","el","i","value","onChange","e","target","onClick","undefined","_c","$RefreshReg$"],"sources":["/Users/manojsahithreddyvanga/Desktop/Testing/chatgpt-clone/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Message from \"./components/Message\";\nimport Input from \"./components/Input\";\nimport History from \"./components/History\";\nimport Clear from \"./components/Clear\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState(() => {\n    const savedMessages = localStorage.getItem(\"messages\");\n    return savedMessages ? JSON.parse(savedMessages) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"messages\", JSON.stringify(messages));\n  }, [messages]);\n\n  const handleSubmit = async () => {\n    const userMessage = { role: \"user\", content: input };\n    setMessages([...messages, userMessage]);\n\n    try {\n      const response = await fetch(\"http://localhost:5000/api/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ user_input: input }),\n      });\n\n      const data = await response.json();\n      const assistantMessage = { role: \"assistant\", content: data.response };\n\n      setMessages((prev) => [...prev, assistantMessage]);\n      setInput(\"\");\n    } catch (error) {\n      console.error(\"Error during fetch:\", error);\n    }\n  };\n\n  const clear = async () => {\n    setMessages([]);\n    localStorage.removeItem(\"messages\");\n\n    await fetch(\"http://localhost:5000/api/clear\", {\n      method: \"POST\",\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"Column\">\n        <h3 className=\"Title\">Chat Messages</h3>\n        <div className=\"Content\">\n          {messages.map((el, i) => (\n            <Message key={i} role={el.role} content={el.content} />\n          ))}\n        </div>\n        <Input\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onClick={input ? handleSubmit : undefined}\n        />\n      </div>\n      <Clear onClick={clear} />\n    </div>\n  );\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,MAAM;IAC7C,MAAMc,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACtD,OAAOF,aAAa,GAAGG,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,GAAG,EAAE;EACvD,CAAC,CAAC;EAEFb,SAAS,CAAC,MAAM;IACdc,YAAY,CAACI,OAAO,CAAC,UAAU,EAAEF,IAAI,CAACG,SAAS,CAACR,QAAQ,CAAC,CAAC;EAC5D,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,WAAW,GAAG;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEd;IAAM,CAAC;IACpDG,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEU,WAAW,CAAC,CAAC;IAEvC,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEZ,IAAI,CAACG,SAAS,CAAC;UAAEU,UAAU,EAAEpB;QAAM,CAAC;MAC5C,CAAC,CAAC;MAEF,MAAMqB,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClC,MAAMC,gBAAgB,GAAG;QAAEV,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEO,IAAI,CAACN;MAAS,CAAC;MAEtEZ,WAAW,CAAEqB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,gBAAgB,CAAC,CAAC;MAClDtB,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,MAAME,KAAK,GAAG,MAAAA,CAAA,KAAY;IACxBxB,WAAW,CAAC,EAAE,CAAC;IACfE,YAAY,CAACuB,UAAU,CAAC,UAAU,CAAC;IAEnC,MAAMZ,KAAK,CAAC,iCAAiC,EAAE;MAC7CC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;EAED,oBACEpB,OAAA;IAAKgC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBjC,OAAA;MAAKgC,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACrBjC,OAAA;QAAIgC,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxCrC,OAAA;QAAKgC,SAAS,EAAC,SAAS;QAAAC,QAAA,EACrB5B,QAAQ,CAACiC,GAAG,CAAC,CAACC,EAAE,EAAEC,CAAC,kBAClBxC,OAAA,CAACL,OAAO;UAASqB,IAAI,EAAEuB,EAAE,CAACvB,IAAK;UAACC,OAAO,EAAEsB,EAAE,CAACtB;QAAQ,GAAtCuB,CAAC;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAuC,CACvD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNrC,OAAA,CAACJ,KAAK;QACJ6C,KAAK,EAAEtC,KAAM;QACbuC,QAAQ,EAAGC,CAAC,IAAKvC,QAAQ,CAACuC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC1CI,OAAO,EAAE1C,KAAK,GAAGW,YAAY,GAAGgC;MAAU;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNrC,OAAA,CAACF,KAAK;MAAC+C,OAAO,EAAEf;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV;AAACnC,EAAA,CA7DuBD,GAAG;AAAA8C,EAAA,GAAH9C,GAAG;AAAA,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}